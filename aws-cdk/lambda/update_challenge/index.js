"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const client = new client_dynamodb_1.DynamoDBClient({});
const ddb = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
const handler = async (event) => {
    const tableName = process.env.CHALLENGES_TABLE;
    const body = event.body ? JSON.parse(event.body) : {};
    const id = event.pathParameters?.id;
    if (!id)
        return { statusCode: 400, body: 'Missing id' };
    const fields = [];
    const values = {};
    for (const key of ['name', 'description', 'difficulty', 'duration', 'category_id']) {
        if (body[key] !== undefined) {
            fields.push(`${key} = :${key}`);
            values[`:${key}`] = body[key];
        }
    }
    if (fields.length === 0)
        return { statusCode: 400, body: 'Nothing to update' };
    await ddb.send(new lib_dynamodb_1.UpdateCommand({
        TableName: tableName,
        Key: { challenge_id: id, category_id: body.category_id },
        UpdateExpression: `SET ${fields.join(', ')}`,
        ExpressionAttributeValues: values,
        ReturnValues: 'ALL_NEW',
    }));
    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': '*',
        'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
    };
    return { statusCode: 200, headers, body: JSON.stringify({ ok: true }) };
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw4REFBMEQ7QUFDMUQsd0RBQThFO0FBRTlFLE1BQU0sTUFBTSxHQUFHLElBQUksZ0NBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QyxNQUFNLEdBQUcsR0FBRyxxQ0FBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFekMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQTZCLEVBQUUsRUFBRTtJQUM3RCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFpQixDQUFDO0lBQ2hELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDdEQsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUM7SUFFcEMsSUFBSSxDQUFDLEVBQUU7UUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFFeEQsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzVCLE1BQU0sTUFBTSxHQUF3QixFQUFFLENBQUM7SUFFdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxhQUFhLENBQUMsRUFBRTtRQUNsRixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxDQUFDO0lBRS9FLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLDRCQUFhLENBQUM7UUFDL0IsU0FBUyxFQUFFLFNBQVM7UUFDcEIsR0FBRyxFQUFFLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUN4RCxnQkFBZ0IsRUFBRSxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDNUMseUJBQXlCLEVBQUUsTUFBTTtRQUNqQyxZQUFZLEVBQUUsU0FBUztLQUN4QixDQUFDLENBQUMsQ0FBQztJQUNKLE1BQU0sT0FBTyxHQUFHO1FBQ2QsY0FBYyxFQUFFLGtCQUFrQjtRQUNsQyw2QkFBNkIsRUFBRSxHQUFHO1FBQ2xDLDhCQUE4QixFQUFFLEdBQUc7UUFDbkMsOEJBQThCLEVBQUUsNkJBQTZCO0tBQzlELENBQUM7SUFDRixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQzFFLENBQUMsQ0FBQztBQWpDVyxRQUFBLE9BQU8sV0FpQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnRWMiB9IGZyb20gJ2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYic7XHJcbmltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIFVwZGF0ZUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9saWItZHluYW1vZGInO1xyXG5cclxuY29uc3QgY2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHt9KTtcclxuY29uc3QgZGRiID0gRHluYW1vREJEb2N1bWVudENsaWVudC5mcm9tKGNsaWVudCk7XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnRWMikgPT4ge1xyXG4gIGNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LkNIQUxMRU5HRVNfVEFCTEUhO1xyXG4gIGNvbnN0IGJvZHkgPSBldmVudC5ib2R5ID8gSlNPTi5wYXJzZShldmVudC5ib2R5KSA6IHt9O1xyXG4gIGNvbnN0IGlkID0gZXZlbnQucGF0aFBhcmFtZXRlcnM/LmlkO1xyXG5cclxuICBpZiAoIWlkKSByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6ICdNaXNzaW5nIGlkJyB9O1xyXG5cclxuICBjb25zdCBmaWVsZHM6IHN0cmluZ1tdID0gW107XHJcbiAgY29uc3QgdmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XHJcblxyXG4gIGZvciAoY29uc3Qga2V5IG9mIFsnbmFtZScsICdkZXNjcmlwdGlvbicsICdkaWZmaWN1bHR5JywgJ2R1cmF0aW9uJywgJ2NhdGVnb3J5X2lkJ10pIHtcclxuICAgIGlmIChib2R5W2tleV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBmaWVsZHMucHVzaChgJHtrZXl9ID0gOiR7a2V5fWApO1xyXG4gICAgICB2YWx1ZXNbYDoke2tleX1gXSA9IGJvZHlba2V5XTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChmaWVsZHMubGVuZ3RoID09PSAwKSByZXR1cm4geyBzdGF0dXNDb2RlOiA0MDAsIGJvZHk6ICdOb3RoaW5nIHRvIHVwZGF0ZScgfTtcclxuXHJcbiAgYXdhaXQgZGRiLnNlbmQobmV3IFVwZGF0ZUNvbW1hbmQoe1xyXG4gICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXHJcbiAgICBLZXk6IHsgY2hhbGxlbmdlX2lkOiBpZCwgY2F0ZWdvcnlfaWQ6IGJvZHkuY2F0ZWdvcnlfaWQgfSxcclxuICAgIFVwZGF0ZUV4cHJlc3Npb246IGBTRVQgJHtmaWVsZHMuam9pbignLCAnKX1gLFxyXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogdmFsdWVzLFxyXG4gICAgUmV0dXJuVmFsdWVzOiAnQUxMX05FVycsXHJcbiAgfSkpO1xyXG4gIGNvbnN0IGhlYWRlcnMgPSB7XHJcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyxcclxuICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJzogJyonLFxyXG4gICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnOiAnR0VULFBPU1QsUFVULERFTEVURSxPUFRJT05TJyxcclxuICB9O1xyXG4gIHJldHVybiB7IHN0YXR1c0NvZGU6IDIwMCwgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBvazogdHJ1ZSB9KSB9O1xyXG59O1xyXG4iXX0=